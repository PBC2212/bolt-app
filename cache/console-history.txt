await ret.allowance(user.address, swap.target)
await swap.tokenOracles(addresses.RET)
await swap.allowedTokens(addresses.RET)
const [user] = await ethers.getSigners();
const ret = await ethers.getContractAt("AssetToken", addresses.RET);
const swap = await ethers.getContractAt("SwapFacility", addresses.SwapFacility);
const addresses = JSON.parse(fs.readFileSync("addresses.json").toString());
const fs = require("fs");
await swap.allowedTokens(addresses.RET)
console.log("SwapFacility RET:", ethers.formatEther(await ret.balanceOf(swap.target)));
console.log("User RET:", ethers.formatEther(await ret.balanceOf(user.address)));
const [user] = await ethers.getSigners();
const swap = await ethers.getContractAt("SwapFacility", addresses.SwapFacility);
const ret = await ethers.getContractAt("AssetToken", addresses.RET);
const addresses = JSON.parse(fs.readFileSync("addresses.json").toString());
const fs = require("fs");
console.log("SwapFacility RET:", ethers.formatEther(await ret.balanceOf(swap.target)));
console.log("User RET:", ethers.formatEther(await ret.balanceOf(user.address)));
npx hardhat run scripts/testSwapRBY.js --network localhost
npx hardhat run scripts/testSwapRET.js --network localhost
console.log("VET locked:", ethers.formatEther(await vet.balanceOf(swap.target)));
console.log("RBY locked:", ethers.formatEther(await rby.balanceOf(swap.target)));
console.log("RET locked:", ethers.formatEther(await ret.balanceOf(swap.target)));
console.log("âœ… RBY name:", await rby.name());
console.log("âœ… RET name:", await ret.name());
console.log("âœ… VET name:", await vet.name());
const [user] = await ethers.getSigners();
const swap = await ethers.getContractAt("SwapFacility", addresses.SwapFacility);
const rby = await ethers.getContractAt("AssetToken", addresses.RBY);
const ret = await ethers.getContractAt("AssetToken", addresses.RET);
const vet = await ethers.getContractAt("AssetToken", addresses.VET);
const addresses = JSON.parse(fs.readFileSync("addresses.json").toString());
const fs = require("fs");
console.log("RBY locked:", ethers.formatEther(await rby.balanceOf(swap.target)));
console.log("RET locked:", ethers.formatEther(await ret.balanceOf(swap.target)));
console.log("VET locked:", ethers.formatEther(await vet.balanceOf(swap.target)));
const [user] = await ethers.getSigners();
const swap = await ethers.getContractAt("SwapFacility", addresses.SwapFacility);
const rby = await ethers.getContractAt("AssetToken", addresses.RBY);
const ret = await ethers.getContractAt("AssetToken", addresses.RET);
const vet = await ethers.getContractAt("AssetToken", addresses.VET);
const addresses = JSON.parse(fs.readFileSync("addresses.json").toString());
const fs = require("fs");
await ret.grantRole(await ret.MINTER_ROLE(), swap.target);
// Grant MINTER_ROLE to SwapFacility so it can lock (or burn) tokens
const swap = await ethers.getContractAt("SwapFacility", addresses.SwapFacility);
const ret = await ethers.getContractAt("AssetToken", addresses.RET);
const addresses = JSON.parse(fs.readFileSync("addresses.json").toString());
const fs = require("fs");
const [user] = await ethers.getSigners();
await vet.grantRole(await vet.MINTER_ROLE(), swap.target);
const swap = await ethers.getContractAt("SwapFacility", addresses.SwapFacility);
const vet = await ethers.getContractAt("AssetToken", addresses.VET);
const addresses = JSON.parse(fs.readFileSync("addresses.json").toString());
const fs = require("fs");
const [user] = await ethers.getSigners();
await vet.grantRole(MINTER_ROLE, swap.target);
const MINTER_ROLE = await vet.MINTER_ROLE();
const swap = await ethers.getContractAt("SwapFacility", addresses.SwapFacility);
const vet = await ethers.getContractAt("AssetToken", addresses.VET);
const addresses = JSON.parse(fs.readFileSync("./addresses.json").toString());
const fs = require("fs");
const [user] = await ethers.getSigners();
await vet.hasRole(await vet.MINTER_ROLE(), swap.target);
const swap = await ethers.getContractAt("SwapFacility", addresses.SwapFacility);
const vet = await ethers.getContractAt("AssetToken", addresses.VET);
const addresses = JSON.parse(fs.readFileSync("./addresses.json").toString());
const fs = require("fs");
const [user] = await ethers.getSigners();
await vet.grantRole(MINTER_ROLE, swap.target); // or swap.address
const MINTER_ROLE = await vet.MINTER_ROLE();
const swap = await ethers.getContractAt("SwapFacility", addresses.SwapFacility);
const vet = await ethers.getContractAt("AssetToken", addresses.VET);
const addresses = JSON.parse(fs.readFileSync("./addresses.json").toString());
const fs = require("fs");
const [user] = await ethers.getSigners();
await vet.grantRole(MINTER_ROLE, swap.target);  // ðŸ‘ˆ allows SwapFacility to burn tokens
const MINTER_ROLE = await vet.MINTER_ROLE();
const swap = await ethers.getContractAt("SwapFacility", addresses.SwapFacility);
const vet = await ethers.getContractAt("AssetToken", addresses.VET);
const addresses = JSON.parse(fs.readFileSync("./addresses.json").toString());
const fs = require("fs");
const [user] = await ethers.getSigners();
const rbyAddress = addresses.RBY;
const vetAddress = addresses.VET;
const retAddress = addresses.RET;
const swapFacilityAddress = addresses.SwapFacility;
const addresses = JSON.parse(fs.readFileSync("./addresses.json").toString());
const fs = require("fs");
user.address
const [user] = await ethers.getSigners();
(await RBY.balanceOf(user.address)).toString()
(await VET.balanceOf(user.address)).toString()
const RBY = await ethers.getContractAt("AssetToken", "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0");
const VET = await ethers.getContractAt("AssetToken", "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512");
const [user] = await ethers.getSigners();